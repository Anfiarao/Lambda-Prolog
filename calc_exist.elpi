

%%%Exist

isType (exist B C) prop :- 
    isType B col,
    (pi x\ of x B int => isType (C x) prop).
isType (exist B C) props :- 
    isType B set,
    (pi x\ of x B int => isType (C x) props).

of (exist_p B C BB CC) (exist B C) int :- 
        isType B col,
        of BB B int,
        of CC (C BB) int,
        (pi x\ of x B int => isType (C x) prop).


of (elim_exist Pair M MM) M int :-
        of Pair (exist B C) int,
        isType M prop,
        (pi x \ pi y \
            of x B int => of y (C x) int =>  
                of (MM x y) M int ).

hstep (elim_exist (pair B C Bb Cc) M Mm) (Mm Bb Cc) :-
    of Bb B int,
    of Cc (C Bb) int,
    (pi x \ pi y \
        of x B int => of y (C x) int =>  
            of (Mm x y) M  int).
        
dstep (exist_p B C BB CC) (exist_p B' C BB CC) :- dstep B B'.
dstep (exist_p B C BB CC) (exist_p B C' BB CC) :- (pi x\ of x B int => dstep (C x) (C' x)).
dstep (exist_p B C BB CC) (exist_p B C BB' CC) :- dstep BB BB'.
dstep (exist_p B C BB CC) (exist_p B C BB CC') :- dstep CC CC'.

dstep (elim_exist Pair M MM) (elim_exist Pair' M MM) :- dstep Pair Pair'.

dstep (elim_exist Pair M MM) (elim_exist Pair M MM') :- 
    of Pair (exist B C) int,
    pi x\ pi y\ of x B int => of y (C x) int => dstep (MM x y) (MM' x y).

dstep (elim_exist Pair M MM) (elim_exist Pair M' MM) :- dstep M M'.


dstep (exist A B) (exist A' B) :- dstep A A'.
dstep (exist A B) (exist A B') :- 
    pi x\ of x A int => dstep (B x) (B' x).



%------------------------------%
of true (exist B C) ext :-
    isType B col,
    (pi x\ of x B ext => isType (C x) prop) 
    of BB B ext,
    of true (C BB) ext.

%of true M ext :-
%    isType M prop,
%    of true (exist B C) ext,
%    (pi x\ pi y\
%        of x B ext => of y (C x) ext =>
%            of true M ext).
