
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% non contextual, non reflexive, maybe transitive closure
% hstep A B

% non contextual, transitive, reflexive normal form
hnf A A.
hnf A B :- hstep A C, !, hnf C B.

% contextual, non reflexive, maybe transitive closure
dstep A B :- hstep A B.

% contextual, transitive, reflexive normal form
nf A B :- dstep A C, ! nf C B.
nf A A.

conv A B :- nf A C, nf B C.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% of_inf T TY  the type 
% inferred for T is TY
isa IE T TY :- 
    of IE T TY', 
    conv TY TY'. 
    % isa T TY..T 
    %has the expected type TY


isType col  A  :- isType set   A.
isType col  A  :- isType prop  A.
isType prop A  :- isType propS A.
isType set  A  :- isType propS A.





trad (of Aa AA) 
     (of 
        (tau A_inferred (TradAA) (TradAa) )
        (TradAA) 
     ) :- 
     (trad AA TradAA), 
     (trad Aa TradAa), 
     of (TradAa) A_inferred. 

trad (isType A Ty) (isType TradA Ty)
    :- trad A TradA.

tau Tipo_di_partenza Tipo_di_arrivo Input Output :- fail.
tau' TipoExt ElementoExt Output :- 
    trad TipoExt TipoInt,
    trad ElementoExt ElementoInt,
    of int ElementoInt Ty,
    tau Ty TipoInt ElementoInt Output.

accumulate calc_simpleSets.
accumulate calc_colSigma.
accumulate calc_nat.    
accumulate calc_setSum.
accumulate calc_setPi.


