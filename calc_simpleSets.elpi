%EMPTY SET

isType set n0.

of int (emp Null) (A_Null) :- of int Null n0, (pi z\ (bnf z z, of int z n0) => isType col (A z)), A_Null = A Null. 

bnf (emp A) (emp A') :- bnf A A'.

% SINGLETON SET

isType set singleton.

of int star singleton.

of int (elim_singleton T C) (M T) :- of int T singleton, (pi z\ bnf z z => of int z singleton => isCol (M z) ), of int C (M star). 


bnf singleton singleton.

bnf star star.

bnf (elim_singleton star C) C :- (pi z\ bnf z z => of int z singleton => isCol (M z) ), of int C (M star).
bnf (elim_singleton T C) (elim_singleton T' C) :- bnf T T'.














%%POWER COLLECTION 

trad powerCol propsCol.

bnf (equ propsCol Z1 Z2) (and (implies Z1 Z2) (implies Z2 Z1))
    :- of Z1 propsCol,
       of Z2 propsCol.

bnf (subst X1 X2 W) W :- 
    of W propsCol, 
    (sigma T\ of X1 T, of X2 T).
    
trad (propsEquClass A) TA :- trad A TA.

tau_rec powerCol powerCol (x \ x).

%% EMPTYSET

trad emptyset emptyset.

equ emptyset (lambda emptyset x \ lambda emptyset y \ id emptyset x y).

trad (emp A T) (emp A' T') :-
 trad T T1, tau T T1 T',
 pi x \ trad x x => of int x emptyset => of ext x emptyset => bnf x x =>
  trad (A x) (A1 x), tau (A x) (A1 x) (A' x). 

tau_rec emptyset emptyset (x \ x).

prove_equ (emp A T) (emp A' T') (emp (EQU T T') T) :-
 of int T TTY, equ TTY EQU.


%% SINGLETON

trad singleton singleton.

equ singleton (x \ y \ id singleton x y).

trad star star.

trad (elim_singleton T C) (elim_singleton T' C') :-
 trad T T1, tau T T1 T',
 (pi x \ 
    trad xe xi => 
    of int xi singleton => 
    of ext xe singleton => 
    bnf xi xi => bnf xe xe =>
        trad (C x) (C1 x),tau (C x) (C1 x) (C' x)).

tau_rec singleton singleton (x \ x).

sigm X X :- of int X singleton.

prove_eq (elim_singleton T1 C1) (elim_singleton T2 C2) P :-
 pi x \ prove_eq x x => prove_eq (C1 x) (C2 x).

prove_eq star star (refl singleton star).




