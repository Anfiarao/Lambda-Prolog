
type fun        mttType -> mttType -> mttType.
type fun_lam    mttType -> (mttTerm -> mttTerm) -> mttTerm.
type fun_app    mttTerm -> mttTerm -> mttTerm.



isType (fun B C) KIND3 IE
    :- spy(isType B KIND1 IE)
    ,  spy((pi x\ locDecl x B  => isType C KIND2 IE))
    ,  spy(pts_fun KIND1 KIND2 KIND3)
    .

of (fun_lam B F) (fun B C) IE 
    :- isType B _ IE
    ,  (pi x\ locDecl x B => isType C _ IE)
    ,  (pi x\ locDecl x B => of (F x) C IE)
    .

of (fun_app Lam X) C IE
    :- spy(isa (Lam) (fun B C) IE)
    ,  spy(isa X B IE)
    .

hstep (fun_app LAM Bb) (F Bb)
    :- of LAM (fun B C)
    ,  (isa B Bb IE)
    ,  hnf LAM (fun_lam B' F)
    ,  (conv B B')
    ,  (pi x\ locDecl x B => isa (F x) C IE )
    ,  (pi x\ locDecl x B => isType C KIND IE )
    .

dconv (fun B C) (fun B' C') :- spy(conv B B'), spy(conv C C').
dconv (fun_app F X) (fun_app F' X') :- spy(conv F F'), spy(conv X X').
dconv (fun_lam B F) (fun_lam B' F') 
    :- spy(conv B B')
    ,  (pi x\ locDecl x B 
        => spy(conv (F x) (F' x)))
    .
