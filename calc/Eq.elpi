%% calc_Eq.elpi


type propEq mttType -> mttTerm -> mttTerm -> mttType.
type eqId   mttType -> mttTerm -> mttTerm.

pts_eq K props :- pts_leq K set, !.
pts_eq _ propc.

isType (propEq A AA1 AA2) KIND ext 
    :- isType A KIND' ext
    ,  pts_eq KIND' KIND
    ,  isa AA1 A ext
    ,  isa AA2 A ext
    .


of (eqId C Cc) (propEq C Cc Cc) ext
    :-  spy(of Cc C ext)
    .



%dstep A B :- of _ ()

dconv (propEq A AA1 AA2) (propEq A' AA1' AA2') :- spy(conv A A'), spy(conv AA1 AA1'), spy (conv AA2 AA2').

dconv (eqId A AA) (eqId A' AA') :- conv A A', conv AA AA'.
