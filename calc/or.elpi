

type or mttType -> mttType -> mttType.
type inl_or, inr_or mttType -> mttType -> mttTerm -> mttTerm.
type elim_or mttType -> mttTerm -> mttTerm -> mttTerm -> mttTerm.

isType (or A B) KIND IE 
    :- isType A KIND1 IE
    ,  isType B KIND2 IE
    ,  (pts_prop KIND1 KIND2 KIND).

of (inr_or A B Bb) (or A B) IE 
    :- isType B _ IE
     , isType A _ IE
     , (isa Bb B IE)
     .

of (inl_or A B Aa) (or A B) IE  
    :- isType A _ IE
     , isType B _ IE
     , (isa Aa A IE)
     .

of (elim_or C W Cl Cr) (C W) IE 
    :- spy (of W (or A B) IE)
     , spy (isType (or A B) _ IE) 
     , spy (pi z\ locDecl z (or A B) => isType (C z) KIND IE)
     , spy (pi x\ locDecl x A => spy(isa (Cl x) (C (inr_or A B x)) IE) ) 
     , spy (pi y\ locDecl y B => isa (Cr y) (C (inl_or A B y)) IE) 
     .

hstep (elim_or C W Cl Cr) (Cl Wl) 
    :- (hnf W (inl_or A B Wl))
    ,  (isa W (or A B) IE)
    ,  (pi z\ locDecl z (or A B) => isType (C z) KIND IE)
    ,  (pi x\ locDecl x A IE => isa (Cl x) (C (inr_or A B x)) IE) 
    ,  (pi y\ locDecl y B IE => isa (Cr y) (C (inl_or A B y)) IE)
    .

hstep (elim_or C W Cl Cr) (Cr Wr)
    :- (hnf W (inr_or A B Wr))
    ,  (isa W (or A B) IE)
    ,  (pi z\ locDecl z (or A B) => isType (C z) KIND IE)
    ,  (pi x\ locDecl x A IE => isa (Cl x) (C (inr_or A B x)) IE) 
    ,  (pi y\ locDecl y B IE => isa (Cr y) (C (inl_or A B y)) IE)
    .

dconv (elim_or C W Cl Cr) (elim_or C' W' Cl' Cr')
    :- (conv W W')
    ,  (of W (or A B) IE)
    ,  (pi z \ locDecl z (or A B) => (conv (C z) (C' z) ) )
    ,  (pi z \ locDecl z (or A B) => (conv (Cl z) (Cl' z) ) )
    ,  (pi z \ locDecl z (or A B) => (conv (Cr z) (Cr' z) ) )
    .
