%%-- implies.elpi

type implies    mttType -> mttType -> mttType.
type impl_lam   mttType -> (mttTerm -> mttTerm) -> mttTerm.
type impl_app   mttTerm -> mttTerm -> mttTerm.


isType (implies B C) KIND IE :-
    isType B KIND IE, 
    pi x\ locDecl x B => isType C KIND IE.

of (impl_lam B F) (implies B C) IE :-
        (isType B KIND IE),
        (KIND = props; KIND = propc),
        (pi x\ locDecl x B => isa (F x) C IE).

of (impl_app Lam X) C IE :-
        hnf Lam (impl_lam B F), 
        isa (impl_lam B F) (implies B C) IE,
        isa X B IE.

hstep (impl_app LAM Bb) (F Bb) :- 
        hnf LAM (impl_lam B F),
        isType B KIND IE,
        (KIND = props; KIND = propc),
        isa Bb B IE,
        (pi x\ locDecl x B => isa (F x) (C x) IE ),
        (pi x\ locDecl x B => isType (C x) KIND IE ).

dstep (impl_lam B1 F) (impl_lam B2 F) :- dstep B1 B2.

dstep (impl_lam B F1) (impl_lam B F2) :- 
        pi b\ locDecl b B => dstep (F1 b) (F2 b).

dstep (impl_app L X1) (impl_app L X2) :- dstep X1 X2.
dstep (impl_app L1 X) (impl_app L2 X) :- dstep L1 L2.







