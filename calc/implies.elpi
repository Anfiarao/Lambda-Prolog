%%-- implies.elpi

type implies    mttType -> mttType -> mttType.
type impl_lam   mttType -> (mttTerm -> mttTerm) -> mttTerm.
type impl_app   mttTerm -> mttTerm -> mttTerm.


isType (implies B C) KIND IE :-
    isType B KIND IE, 
   pi x\ locDecl x B => isType C KIND IE.

of (impl_lam B F) (implies B C) IE :-
        (isaT B propc IE),
        (isaT C propc IE),
        (pi x\ locDecl x B => isa (F x) C IE).

of (impl_app Lam X) C IE :-
        of Lam (implies B C),
        isa X B IE.

hstep (impl_app LAM Bb) (F Bb) :- 
        hnf LAM (impl_lam B F),
        isType B KIND IE,
        (pts_leq KIND propc),
        isa Bb B IE,
        (pi x\ locDecl x B => isa (F x) (C x) IE ),
        (pi x\ locDecl x B => isType (C x) KIND' IE ),
        pts_leq KIND' propc.

        
dconv (implies B C) (implies B' C') :- (conv B B'), (conv C C').
dconv (impl_app F X) (impl_app F' X') :- (conv F F'), (conv X X').
dconv (impl_lam B F) (impl_lam B' F') :- (conv B B'), 
        pi x\ locDecl x B =>
                %locDecl x' B' =>
                %hstep x x'    => 
                (conv (F x) (F' x)).




