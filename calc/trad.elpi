%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

trad (forall B C) (forall B' C') :-
        spy (trad B B'),
        spy (pi x\ pi x' \ trad x x' => locDecl x B => locDecl x' B' => trad (C x )(C'  x')).

trad singleton singleton.
trad star star.
trad (setSum A B) (setSum Ai Bi) :- trad A Ai, trad B Bi.
trad (inl A' B Aa) (inl Ai' Bi Aai') 
        :- trad A' Ai'
        ,  trad B Bi
        ,  of Aa A ext
        ,  pippo A A' PIPPO
        ,  trad Aa Aai
        ,  Aai' = PIPPO Aai
        .

pippo (setSum A B) (setSum A' B') F 
        :- (pippo A A' FA)
        ,  (pippo B B' FB)
        ,  F = (z \elim_setSum 
                 (_ \ setSum A' B') 
                 z 
                 (x \ inl A' B' (FA x)) 
                 (y \ inr A' B' (FB y)))
        .

equ (setSum A B) P 
        :- isType A _ ext , equ A PA
        ,  isType B _ ext , equ B PB
        ,  P = (z\ z'\ or 
               (exist (A) (x \ 
                exist (A) (x'\ and (and 
                        (propId (setSum A B) z  (inl A B x)) 
                        (propId (setSum A B) z' (inl A B x')) ) 
                        (PA x x')
                ))) 
               (exist (B) (x \ 
                exist (B) (x'\ and (and 
                        (propId (setSum A B) z  (inr A B x)) 
                        (propId (setSum A B) z' (inr A B x')) ) 
                        (PB x x')
                )))
        )
        .
pippoequ (inl A B X) (inl A B X') H 
        :- pippoequ X X' K
        ,  trad X Xi
        ,  trad X' Xi'
        ,  of X Ae ext
        ,  pippo Ae A PIA
        ,  pippo Ae' A PIA'
        ,  equ A PA
        ,  equ B PB
        ,  inl_or (exist (A) (x \ 
                   exist (A) (x'\ and (and 
                         (propId (setSum A B) (inl A B (PIA Xi))  (inl A B x)) 
                         (propId (setSum A B) (inl A B (PIA' Xi')) (inl A B x')) ) 
                         (PA x x')
                   ))) 
                  (exist (B) (x \ 
                   exist (B) (x'\ and (and 
                         (propId (setSum A B) (inr A B (PIA Xi))  (inr A B x)) 
                         (propId (setSum A B) (inr A B (PIA'Xi')) (inr A B x')) ) 
                         (PB x x')
                   ))) 
                  (pair_exist (PIA Xi) (pair_exist (PIA' Xi') 
                   pair_and (pair_and 
                        (id (setSum A B) (inl A B (PIA Xi) )) 
                        (id (setSum A B) (inl A B (PIA' Xi') ))) 
                        (K)
                  ))
        .

trad (implies B C) (forall B' C') :-
        trad B B',
        spy(pi x\ pi x'\ (trad x x', locDecl x B, locDecl x' B') => trad C (C' x')) .


trad (propEq A Aa1 Aa2) R :-
        spy(equ  A EquA),
        spy(trad Aa1 Aa1'),
        spy (trad Aa2 Aa2'),
        spy(R = (EquA Aa1' Aa2')).

trad (eqId  A Aa)  (ReflA Aa') :-
        reflu A ReflA,
        trad Aa Aa'.

trad (fun B C) R :-
        spy(trad B B') ,
        spy(trad C C') ,
        spy(equ B EquB) ,
        equ C EquC,
        R = (colSigma (fun B' C') h\ forall B' y1\ forall B' y2\ 
        forall (EquB y1 y2) d\ EquC (fun_app h y1 ) (fun_app h y2))
        .
trad (fun_app F X) R :-
        spy(of F (fun B C) ext),
        spy(of X B2 ext),
        spy(pippo B2 B PIPPO),
        spy(trad X X'),
        spy(trad F F'),
        spy( of F' T int),
        spy(T = (colSigma B' _)),
        R = (fun_app (elim_colSigma F' (_\B') (x\y\x) ) (PIPPO X')).

equ singleton (x\ y\ propId singleton x y).
reflu singleton (x\ id singleton x).

equ (propEq A Aa1 Aa2) (_\ _\ (propId singleton star star)).

equ (fun B C) P
        :- trad B Bi
        ,  trad C Ci , equ C EquC
        ,  P = (f\ g\ forall Bi x\ EquC (fun_app f x) (fun_app g x))
        .


pippo A A x \ x.
 
pippo (propEq T T1 T2) (propEq T T1' T2') (F) :- 
        spy(pippoequ T1 T1' F1),
        spy(pippoequ T2 T2' F2),
        spy(trad T1 T1i),
        spy(trad T2 T2i),
        spy(trad T1' T1i'),
        spy(trad T2' T2i'),
        spy(trad T Ti),
        F = x\ impl_app ( 
                impl_app ( 
                 forall_app ( 
                  forall_app ( 
                   impl_app ( 
                    forall_app ( 
                     forall_app (k_propId Ti) T1i) T1i') F1) T2i) T2i') F2)  x.
 
% supponiamo che conv X Y per poter usare pippoequ X Y H
%       H Ã¨ la prova che i tradotti siano uguali nel loro setoide
% RINOMINARE pippoequ in tradConv
pippoequ A A (id T' A' ) :-
        trad A A',
        of A' T' int.
pippoequ A B H' :-
        spy(locDecl H (propEq _ A B)),
        trad H H'.

pippoequ (fun_app F X1) (fun_app F X2) H :-
        spy(pippoequ X1 X2 G),
        spy(trad F F'),
        spy(of F' (colSigma TyF MorF) int),
        PI1 = (c\ elim_colSigma c (_\ TyF) (x \ y\ x)),
        P2F' = elim_colSigma F' (c \ MorF (PI1 c)) (x\ y\ y),
        spy(trad X1 X1'),
        spy(trad X2 X2'),
        H = forall_app (forall_app (forall_app P2F' X1') X2') G. 





locDecl (k_propId T) (forall T t1\ forall T t1'\ 
        implies (propId T t1 t1') (forall T t2\ forall T t2'\ 
                implies (propId T t2 t2') (implies (propId T t1 t2) (propId T t1' t2'))) ).


trad (setPi B C) T 
    :- spy(trad B Bi)
    ,  spy(pi x\ pi xi\ locDecl x B => locDecl xi Bi => trad x xi => trad (C x) (Ci xi))
    ,  spy(equ B EquB)
    ,  spy(pi x\ pi xi\ locDecl x B => locDecl xi Bi => trad x xi => equ (C x) (EquC xi))
    ,  spy(pi x1 \ pi x2 \ pi h\
        pi x1i\ pi x2i\ pi hi\ locDecl x1 B => locDecl x2 B
        => locDecl x1i Bi
        => locDecl x2i Bi
        => trad x1 x1i
        => trad x2 x2i
        => (locDecl h (propEq B x1 x2)) 
        => (locDecl hi (EquB x1i x2i))
        => trad h hi
        => spy(pippo (C x1) (C x2) (PippoC x1i x2i hi)))
    ,  T = colSigma (setPi Bi Ci) f\ (forall (Bi) x1\ (forall Bi x2\ (forall (EquB x1 x2) h\
    (
            EquC x2 
            (
                PippoC x1 x2 h (app f x1)
            ) 
            (app f x2)
    )
    )
    
    ) )
    .


pippo (fun B C) (fun B' C') F
        :- spy(pippo B' B FB)
        ,  spy(pippo C C' FC)
        ,  spy(trad C' Ci')
        ,  F = f\ fun_lam Ci' x\ FC (fun_app f (FB x))
        .