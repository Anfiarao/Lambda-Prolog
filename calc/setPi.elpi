%%-- calc_setPi.elpi

type setPi mttType -> (mttTerm -> mttType) -> mttType.
type lambda mttType -> (mttTerm -> mttTerm) -> mttTerm.
type app mttTerm -> mttTerm -> mttTerm.


type fun        mttType -> mttType -> mttType.
type fun_lam    mttType -> (mttTerm -> mttTerm) -> mttTerm.
type fun_app    mttTerm -> mttTerm -> mttTerm.


isType (setPi B C) KIND3 IE :-
    isType B KIND1 IE, 
    pi x\ locDecl x B  => isType (C x) KIND2 IE,
    spy(pts_fun KIND1 KIND2 KIND3)
    .

of (lambda B F) (setPi B C) IE :-
        (isType B _ IE),
        (pi x\ locDecl x B => isa (F x) (C x) IE).

of (app Lam X) (C X) IE :- 
        isa (Lam) (setPi B C) IE,
        isa X B IE. 


hstep (app LAM Bb) (F Bb) :- 
        hnf LAM (lambda B F),
        isType B KIND IE,
        isa Bb B IE,
        (pi x\ locDecl x B => isa (F x) (C x) IE ),
        (pi x\ locDecl x B => isType (C x) KIND IE ).

dstep (lambda B1 F) (lambda B2 F) :- dstep B1 B2.

dstep (lambda B F1) (lambda B F2) :- 
        pi b\ locDecl b B => dstep (F1 b) (F2 b).

dstep (app L X1) (app L X2) :- dstep X1 X2.
dstep (app L1 X) (app L2 X) :- dstep L1 L2.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




isType (fun B C) KIND3 IE :-
    spy(isType B KIND1 IE), 
    spy((pi x\ locDecl x B  => isType C KIND2 IE)),
    spy(pts_fun KIND1 KIND2 KIND3).

of (fun_lam B F) (fun B C) IE :-
        isType B _ IE,
        (pi x\ locDecl x B => isa (F x) C IE).

of (fun_app Lam X) C IE :-
spy        (isa (Lam) (fun B C) IE),

spy        (isa X B IE).
        
hstep (fun_app LAM Bb) (F Bb) :- 
        hnf LAM (fun_lam B F),
        isType B KIND IE,
        isa Bb B IE,
        (pi x\ locDecl x B => isa (F x) C IE ),
        (pi x\ locDecl x B => isType C KIND IE ).

dconv (fun_lam B F) (fun_lam B' F') :- (conv B B'), (conv F F').
dconv (fun_app F X) (fun_app F' X') :- (conv F F'), (conv X X').

dstep (fun_lam B1 F) (fun_lam B2 F) :- dstep B1 B2.

dstep (fun_lam B F1) (fun_lam B F2) :- 
        pi b\ locDecl b B => dstep (F1 b) (F2 b).

dstep (fun_app L X1) (fun_app L X2) :- dstep X1 X2.
dstep (fun_app L1 X) (fun_app L2 X) :- dstep L1 L2.



