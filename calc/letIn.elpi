
%locDef X T M
%letIn lDef N



%locDef X T M
%letIn T M N
%letIn (locDef T M) N %con N di tipo funzione

%of (letIn T M N) T' ext :- announce(of (letIn T M N) T' ext).

of (letIn T M N) T' ext :- 
spy(isaT T propc ext),
spy(    isa M T ext), 
spy(    pi x \ locDecl x T =>  of (N x) T' ext)
    .
isType (letIn T M N) T' ext :- 
spy(    isaT T propc ext),
spy(    isa M T ext), 
spy(    pi x \ locDecl x T =>  isType  (N x) T' ext)
    .



hstep (letIn T M N) (N M) :-
    of (letIn T M N) _ ext.




/*
hstep (letIn (locDef X T M) N) N'
    :-  locDef X T M
    =>  conv N N'
    .
*/
%hstep (letIn T M N) (N M).




