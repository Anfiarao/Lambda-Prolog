
type letIn mttType -> mttTerm -> (mttTerm -> mttTerm) -> mttTerm.

of (letIn T M N) T' ext :- 
spy(    isaT T propc ext),
spy(    isa M T ext), 
spy(    pi x \ locDecl x T =>  of (N x) T' ext).


isType (letIn KIND1 T S) KIND2 ext :- 
spy(    isaT T KIND1 ext), 
spy(    pi x \ locDecl x KIND1 =>  isType  (N x) KIND2 ext).



%hstep (letIn T M N) (N M) :-
%    of (letIn T M N) _ ext.




/*
hstep (letIn (locDef X T M) N) N'
    :-  locDef X T M
    =>  conv N N'
    .
*/
%hstep (letIn T M N) (N M).




