


ofType singleton set IE.

of star singleton IE.

of (elim_singleton Star C Cc) (C Star) IE 
    :- of Star singleton IE
    ,  of Cc (C star) IE
    ,  (pi z\ locDecl z singleton => isaType (C z) col IE)
    .

hstep (elim_singleton star C Cc) Cc 
    :- spy(of Cc (C star) IE)
    ,  spy(pi z\ locDecl z singleton => isaType (C z) col IE )
    .

dconv (elim_singleton T C CC) (elim_singleton T' C' CC') :- conv T T' , conv CC CC',
    (pi z\ locDecl z singleton => conv (C z) (C' z)).

tau_proof_eq star star singleton H 
    :- setoid_refl singleton K
    ,  H = K star
    .


setoid_eq singleton (x\ y\ propId singleton x y).
setoid_refl singleton (x\ id singleton x).
setoid_symm singleton P
    :- P = (x\ y\ h\ elim_id h (a\ b\ propId singleton b a) (a\ id singleton a) )
    ,  spy( pi x\ pi y\ pi h\ locDecl x singleton 
        => locDecl y singleton 
            => locDecl h (propId singleton x y) 
                => of (P x y h) _ int
        )
    . % this structure should check that the handwritten proof term P is well typed
    % it should in localizing errors.



interp singleton singleton.
interp star star.
interp (elim_singleton T C CC) (elim_singleton Ti Ci CCi) 
    :- spy(interp T Ti)
    ,  spy(interp CC CCi)
    ,  spy(pi x\ locDecl x singleton => spy(interp (C x) (Ci x)))
    .





