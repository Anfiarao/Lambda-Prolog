%%%

%%-- calc_setSum.elpi

type setSum mttType -> mttType -> mttType.
type inl, inr mttType -> mttType -> mttTerm -> mttTerm.
type elim_setSum mttType -> mttTerm -> mttTerm -> mttTerm -> mttTerm.
%%Disjoint Sum Type

isType (setSum A B) KIND IE :- isType A KIND1 IE, isType B KIND2 IE,
    pts_fun KIND1 KIND2 KIND.

of (inr A B Bb) (setSum A B) IE 
    :- isType B _ IE
     , isType A _ IE
     , isa Bb B IE
     .

of (inl A B Aa) (setSum A B) IE  
    :- isType A _ IE
     , isType B _ IE
     , isa Aa A IE
     .

of (elim_setSum C W Cl Cr) (C W) IE 
    :- spy (of W (setSum A B) IE)
     , spy (isType (setSum A B) _ IE) 
     , spy (pi z\ locDecl z (setSum A B) => isType (C z) KIND IE)
     , spy (pi x\ locDecl x A => spy(isa (Cl x) (C (inr A B x)) IE) ) 
     , spy (pi y\ locDecl y B => isa (Cr y) (C (inl A B y)) IE) 
     .

hstep (elim_setSum C W Cl Cr) (Cl Wl) 
    :- hnf W (inl A B Wl)
    ,  isa W (setSum A B) IE
    ,  (pi z\ locDecl z (setSum A B) => isType (C z) KIND IE)
    ,  (pi x\ locDecl x A IE => isa (Cl x) (C (inr A B x)) IE) 
    ,  (pi y\ locDecl y B IE => isa (Cr y) (C (inl A B y)) IE)
    .
hstep (elim_setSum C W Cl Cr) (Cr Wr) 
    :- hnf W (inr A B Wr)
    ,  isa W (setSum A B) IE
    ,  (pi z\ locDecl z (setSum A B) => isType (C z) KIND IE)
    ,  (pi x\ locDecl x A IE => isa (Cl x) (C (inr A B x)) IE) 
    ,  (pi y\ locDecl y B IE => isa (Cr y) (C (inl A B y)) IE)
    .

dconv (elim_setSum C W Cl Cr) (elim_setSum C' W' Cl' Cr')
    :- (conv W W')
    ,  (of W (setSum A B) IE)
    ,  (pi z \ locDecl z (setSum A B) => (conv (C z) (C' z) ) )
    ,  (pi z \ locDecl z (setSum A B) => (conv (Cl z) (Cl' z) ) )
    ,  (pi z \ locDecl z (setSum A B) => (conv (Cr z) (Cr' z) ) )
    .





















































































/*



%%-- calc_setSum.elpi

%%Disjoint Sum Type

isType (setSum A B) set :- isType A set, isType B set.

of (inr A B BB) (setSum A B) int :- isType B set, isType A set, isa BB B int.

of (inl A B AA) (setSum A B) int :- isType A set, isType B set, isa AA A int.

of (elim_setSum C W Cl Cr) (CW) int :- 
    of W (setSum A B) int,
    (pi z\ of z (setSum A B) int => isType (C z) set),
    (pi x\ of x A int => of (Cl x) (C (inr A B x)) int) ,
    (pi y\ of y B int => of (Cr y) (C (inl A B y)) int) ,
    CW = C W.

hstep (elim_setSum C W Cl Cr) (Cl Wl) :- hnf W (inl A B Wl).
hstep (elim_setSum C W Cl Cr) (Cr Wr) :- hnf W (inr A B Wr).

dstep (elim_setSum C W Cl Cr) (elim_setSum C W' Cl Cr) :- dstep W W'.

dstep (elim_setSum C W Cl Cr) (elim_setSum C W Cl' Cr) :- 
    pi w\ of w (setSum A B) int => dstep (Cl w) (Cl' w).

dstep (elim_setSum C W Cl Cr) (elim_setSum C W Cl Cr') :- 
    pi w\ of w (setSum A B) int => dstep (Cr w) (Cr' w).  

dstep (elim_setSum C W Cl Cr) (elim_setSum C' W Cl Cr) :- 
    pi w\ of w (setSum A B) int => dstep (C w) (C' w).  


dstep (inl A B AA) (inl A B AA') :- dstep AA AA'.
dstep (inr A B BB) (inr A B BB') :- dstep BB BB'.


%%% Interpretation

trad (setSum A B) (setSum Ai Bi)  :- trad A Ai, trad B Bi.
trad (inl A B AA) (inl Ai Bi AAi) :- trad A Ai, trad B Bi, tau' A AA AAi.
trad (inr A B BB) (inr Ai Bi BBi) :- trad A Ai, trad B Bi, tau' B BB BBi.

trad (elim_setSum C W Cl Cr) (elim_setSum Ci Wi Cli Cri) :- 
    of W (setSum A B) ext,
    tau' (setSum A B) W Wi,
    (pi x\ of x (setSum A B) int => trad (C x) (Ci x) ),
    (pi a\ of a A int => tau' (C (inl A B a)) (Cl a) (Cli a)),
    (pi b\ of b B int => tau' (C (inl A B b)) (Cr b) (Cri b)).

sigm X Y :- of X (setSum A B) int,
    (pi a\ of a A int, sigm (Cl a) (Cl' a)),
    (pi b\ of b B int, sigm (Cr b) (Cr' b)),
    Y = elim_setSum (setSum A B) X Cl' Cr'.


%%equ --     non sono sicuro di che cosa dica il teorema 4.20 
qwe12.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
*/