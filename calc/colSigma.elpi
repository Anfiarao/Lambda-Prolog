%%-- calc_colSigma.elpi

%% STRONG INDEXED COL SUM

isType (colSigma B C) set IE :-
    spy(isaT B set IE),
    spy(pi b\ locDecl b B => isaT (C b) set IE).

of (pair B C BB CC) (colSigma B C) IE :-
    isType B col IE,
    isType (C BB) col IE,
    of BB B IE,
    of CC (C BB) IE,
    isaT (colSigma B C) col IE.

of (elim_colSigma Pair M MM) (M Pair) IE :-
        spy(of Pair (colSigma B C) IE),
        spy (pi z \ locDecl z (colSigma B C) => isaT (M z) col IE),
        spy (pi x \ pi y \
            of x B IE => of y (C x) IE =>  
                of (MM x y) (M (pair B C x y)) IE ).

hstep (elim_colSigma (pair B C Bb Cc) M Mm) (Mm Bb Cc) :-
    of Bb B int,
    of Cc (C Bb) int,
    (pi z\ of z (colSigma B C) int => isType (M z) _),
    (pi x \ pi y \
        of x B int => of y (C x) int =>  
            of (Mm x y) (M (pair B C x y))  int
    ).


dstep (pair B1 C Bb Cc) (pair B2 C Bb Cc) :- dstep B1 B2.

dstep (pair B C1 Bb Cc) (pair B C2 Bb Cc) :- 
    pi b\ of b B int => dstep (C1 b) (C2 b).

dstep (pair B C Bb1 Cc) (pair B C Bb2 Cc) :- dstep Bb1 Bb2.

dstep (pair B C Bb Cc1) (pair B C Bb Cc2) :- dstep Cc1 Cc2.


dstep (elim_colSigma Pair1 M Mm) (elim_colSigma Pair2 M Mm) :- 
    dstep Pair1 Pair2.

dstep (elim_colSigma Pair M Mm1) (elim_colSigma Pair M Mm2) :-
    of Pair (colSigma B C) int, 
    pi x\ pi y\ of x B int => of y (C x) int => dstep (Mm1 x y) (Mm2 x y).

dstep (elim_colSigma Pair M1 Mm) (elim_colSigma Pair M2 Mm) :-
        of Pair Ty int, 
        pi z\ of z Ty int => dstep (M1 z) (M2 z).

dstep (colSigma B C) (colSigma B' C) :- dstep B B'.
dstep (colSigma B C) (colSigma B C') :- (pi x\ of x B int => dstep (C x) (C' x)).








%%colSigma

trad (colSigma B C) (colSigma Bi Ci) :- 
        trad B Bi, 
        spy ( pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int =>
            trad (C xe) (Ci xi) ).

trad (pair B C Bb Cc) (pair Bi Ci Bib Cic) :-
        trad B Bi,
        (pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int => trad (C xe) (Ci xi) 
        ),
        tau' B Bb Bib,
        (pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int => tau' (C xe) Cc Cic  
        ).

sigm DIR W W' :- 
        of W (colSigma B C) int,
        sigm DIR B B',
        (pi x\ pi x'\ 
            of x B int =>
            of x' B' int =>
            sigm DIR x x' =>
            sigm DIR (C x) (C' x')
        ),
        (pi x\
            of x B int =>
            sigm DIR x (F1 x)
        ),
        (pi x\ pi y\
            of x B int =>
            of y (C x) int => 
            sigm DIR x (F1 x) =>
            sigm DIR y (F2 y)
        ),
        W' = (elim_colSigma 
                (W) 
                (colSigma B' C') 
                (w1\ w2\ pair B' C' (F1 w1) (F2 w2) )
             )
        .

%bnf (
%     equ (colSigma B C) Z1 Z2
%    ) 
%    (
%     exist (equ B (p1 Z1) (p1 Z2)
%           ) 
%           (d\
%            subst (p1 Z1) 
%                  (p1 Z2) 
%                  (equ (C (p1 Z2)) (p2 Z1) (p2 Z2))
%           ) 
%    ) :-  of Z1 colSigma B C, of Z2 colSigma B C.

%:- of Z1 (colSigma B C), of Z2 (colSigma B C).

%trad (pair BB CC Bb Cc) (pair (trad BB) (trad CC) (trad Bb) (trad Cc)).

%subst X1 X2 wimSigma




%trad (quotientCol A R ) Ai :- trad A Ai.

%bnf (equ (quotientCol A R) Z1 Z2) (R Z1 Z2) :- of Z1 A, of Z2 A.





/*
%%-- calc_colSigma.elpi

%% STRONG INDEXED COL SUM

isType (colSigma B C) col :-
    isType B col,
    pi b\ of b B int => isType (C b) col.

of (pair B C BB CC) (colSigma B C) int :-
    isType B col,
    isType (C BB) col,
    of BB B int,
    of CC (C BB) int,
    isType (colSigma B C) col.

of (elim_colSigma Pair M MM) (M Pair) int :-
        of Pair (colSigma B C) int,
        (pi z \ of z (colSigma B C) int => isType (M z) col),
        (pi x \ pi y \
            of x B int => of y (C x) int =>  
                of (MM x y) (M (pair B C x y)) int ).

hstep (elim_colSigma (pair B C Bb Cc) M Mm) (Mm Bb Cc) :-
    of Bb B int,
    of Cc (C Bb) int,
    (pi z\ of z (colSigma B C) int => isType (M z) col),
    (pi x \ pi y \
        of x B int => of y (C x) int =>  
            of (Mm x y) (M (pair B C x y))  int
    ).


dstep (pair B1 C Bb Cc) (pair B2 C Bb Cc) :- dstep B1 B2.

dstep (pair B C1 Bb Cc) (pair B C2 Bb Cc) :- 
    pi b\ of b B int => dstep (C1 b) (C2 b).

dstep (pair B C Bb1 Cc) (pair B C Bb2 Cc) :- dstep Bb1 Bb2.

dstep (pair B C Bb Cc1) (pair B C Bb Cc2) :- dstep Cc1 Cc2.


dstep (elim_colSigma Pair1 M Mm) (elim_colSigma Pair2 M Mm) :- 
    dstep Pair1 Pair2.

dstep (elim_colSigma Pair M Mm1) (elim_colSigma Pair M Mm2) :-
    of Pair (colSigma B C) int, 
    pi x\ pi y\ of x B int => of y (C x) int => dstep (Mm1 x y) (Mm2 x y).

dstep (elim_colSigma Pair M1 Mm) (elim_colSigma Pair M2 Mm) :-
        of Pair Ty int, 
        pi z\ of z Ty int => dstep (M1 z) (M2 z).

dstep (colSigma B C) (colSigma B' C) :- dstep B B'.
dstep (colSigma B C) (colSigma B C') :- (pi x\ of x B int => dstep (C x) (C' x)).








%%colSigma

trad (colSigma B C) (colSigma Bi Ci) :- 
        trad B Bi, 
        spy ( pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int =>
            trad (C xe) (Ci xi) ).

trad (pair B C Bb Cc) (pair Bi Ci Bib Cic) :-
        trad B Bi,
        (pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int => trad (C xe) (Ci xi) 
        ),
        tau' B Bb Bib,
        (pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int => tau' (C xe) Cc Cic  
        ).

sigm DIR W W' :- 
        of W (colSigma B C) int,
        sigm DIR B B',
        (pi x\ pi x'\ 
            of x B int =>
            of x' B' int =>
            sigm DIR x x' =>
            sigm DIR (C x) (C' x')
        ),
        (pi x\
            of x B int =>
            sigm DIR x (F1 x)
        ),
        (pi x\ pi y\
            of x B int =>
            of y (C x) int => 
            sigm DIR x (F1 x) =>
            sigm DIR y (F2 y)
        ),
        W' = (elim_colSigma 
                (W) 
                (colSigma B' C') 
                (w1\ w2\ pair B' C' (F1 w1) (F2 w2) )
             )
        .

%bnf (
%     equ (colSigma B C) Z1 Z2
%    ) 
%    (
%     exist (equ B (p1 Z1) (p1 Z2)
%           ) 
%           (d\
%            subst (p1 Z1) 
%                  (p1 Z2) 
%                  (equ (C (p1 Z2)) (p2 Z1) (p2 Z2))
%           ) 
%    ) :-  of Z1 colSigma B C, of Z2 colSigma B C.

%:- of Z1 (colSigma B C), of Z2 (colSigma B C).

%trad (pair BB CC Bb Cc) (pair (trad BB) (trad CC) (trad Bb) (trad Cc)).

%subst X1 X2 wimSigma




%trad (quotientCol A R ) Ai :- trad A Ai.

%bnf (equ (quotientCol A R) Z1 Z2) (R Z1 Z2) :- of Z1 A, of Z2 A.

*/


