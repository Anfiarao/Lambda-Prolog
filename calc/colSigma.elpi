%%-- calc/colSigma.elpi

%% STRONG INDEXED COL SUM

type colSigma mttType -> (mttTerm -> mttType) -> mttType.
type pair mttType ->  (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm.
type elim_colSigma mttTerm -> (mttTerm -> mttType) -> (mttTerm -> mttTerm -> mttTerm) -> mttTerm.


isType (colSigma B C) KIND IE :-
    spy(isType B KIND1 IE),
    spy(pi b\ locDecl b B => isType (C b) KIND2 IE),
    (pts_fun KIND1 KIND2 KIND).

of (pair B C BB CC) (colSigma B C) IE :-
    isType B _ IE,
    isType (C BB) _ IE,
    isa BB B IE,
    isa CC (C BB) IE.

of (elim_colSigma Pair M MM) (M Pair) IE :-
        spy (of Pair (colSigma B C) IE),
        spy (pi z \ locDecl z (colSigma B C) => isType (M z) _ IE),
        spy (pi x \ pi y \
            locDecl x B => locDecl y (C x) =>  
                of (MM x y) (M (pair B C x y)) IE ).

hstep (elim_colSigma Pair M Mm) (Mm Bb Cc) :-
    (hnf Pair (pair B C Bb Cc)),
    (isa Bb B _),
    (isa Cc (C Bb) _),
    (pi z\ locDecl z (colSigma B C) => isType (M z) _ IE),
    (pi x \ pi y \
        locDecl x B  => locDecl y (C x) =>  
            of (Mm x y) (M (pair B C x y))  IE
    ).


dconv (colSigma B C) (colSigma B' C') :- (conv B B'), (pi x\ locDecl x B => conv (C x) (C' x)).
dconv (pair B C BB CC) (pair B' C' BB' CC') :- 
    (conv B B'), 
    (pi x\ locDecl x B => conv (C x) (C' x)),
    (conv BB BB),
    (conv CC CC').

dconv (elim_colSigma Pair M MM) (elim_colSigma Pair' M' MM') :-
    (conv Pair Pair'),
    (of Pair (colSigma B C)),
    (pi z\ locDecl z (colSigma B C) => conv (M z) (M' z)),
    (pi x\ pi y\  locDecl x B => locDecl y (C x) => conv (MM x y) (MM' x y)).



/*

%%colSigma

trad (colSigma B C) (colSigma Bi Ci) :- 
        trad B Bi, 
        spy ( pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int =>
            trad (C xe) (Ci xi) ).

trad (pair B C Bb Cc) (pair Bi Ci Bib Cic) :-
        trad B Bi,
        (pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int => trad (C xe) (Ci xi) 
        ),
        tau' B Bb Bib,
        (pi xe\ pi xi\ 
            trad xe xi => 
            of xe B ext =>
            of xi Bi int => tau' (C xe) Cc Cic  
        ).

sigm DIR W W' :- 
        of W (colSigma B C) int,
        sigm DIR B B',
        (pi x\ pi x'\ 
            of x B int =>
            of x' B' int =>
            sigm DIR x x' =>
            sigm DIR (C x) (C' x')
        ),
        (pi x\
            of x B int =>
            sigm DIR x (F1 x)
        ),
        (pi x\ pi y\
            of x B int =>
            of y (C x) int => 
            sigm DIR x (F1 x) =>
            sigm DIR y (F2 y)
        ),
        W' = (elim_colSigma 
                (W) 
                (colSigma B' C') 
                (w1\ w2\ pair B' C' (F1 w1) (F2 w2) )
             )
        .
*/