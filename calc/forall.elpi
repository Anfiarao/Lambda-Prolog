%%-- calc_setPi.elpi

type forall     mttType -> (mttTerm -> mttType) -> mttType.
type forall_lam mttType -> (mttTerm -> mttTerm) -> mttTerm.
type forall_app mttTerm -> mttTerm -> mttTerm.

isType (forall B C) KIND IE :-
spy    (isType B KIND' IE), 
spy    (pi x\ locDecl x B  => spy(isType (C x) KIND IE)),
spy    (KIND' = set, KIND = props ; KIND' = col,  KIND = propc).

of (forall_lam B F) (forall B C) IE :-
        (isType B _ IE),
        (pi x\ locDecl x B => isa (F x) (C x) IE).

of (forall_app Lam X) (C X) IE :- 
        isa (Lam) (setPi B C) IE,
        isa X B IE. 


hstep (forall_app LAM Bb) (F Bb) :- 
        hnf LAM (forall_lam B F),
        isType B _ IE,
        isa Bb B IE,
        (pi x\ locDecl x B => isa (F x) (C x) IE ),
        (pi x\ locDecl x B => isType (C x) KIND IE ).

dstep (lambda B1 F) (lambda B2 F) :- dstep B1 B2.

dstep (lambda B F1) (lambda B F2) :- 
        pi b\ locDecl b B => dstep (F1 b) (F2 b).

dstep (app L X1) (app L X2) :- dstep X1 X2.
dstep (app L1 X) (app L2 X) :- dstep L1 L2.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



