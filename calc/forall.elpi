%%-- calc_setPi.elpi

type forall     mttType -> (mttTerm -> mttType) -> mttType.
type forall_lam mttType -> (mttTerm -> mttTerm) -> mttTerm.
type forall_app mttTerm -> mttTerm -> mttTerm.

isType (forall B C) KIND3 IE 
    :- spy(isType B KIND IE)
    ,  spy(pi x\ locDecl x B  => spy(isType (C x) KIND' IE))
    ,  spy(pts_for KIND KIND' KIND3)
    .

of (forall_lam B F) (forall B C) IE
    :- (isType B _ IE)
    ,  (pi x\ locDecl x B => isa (F x) (C x) IE)
    .

of (forall_app Lam X) (C X) IE 
    :- isa (Lam) (forall B C) IE
    ,  isa X B IE
    .


hstep (forall_app LAM Bb) (F Bb) 
    :- hnf LAM (forall_lam B F)
    ,  isType B _ IE
    ,  isa Bb B IE
    ,  (pi x\ locDecl x B => isa (F x) (C x) IE )
    ,  (pi x\ locDecl x B => isType (C x) KIND IE )
    .

dconv (forall B C) (forall B' C') 
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    .
dconv (forall_app F X) (forall_app F' X') :- (conv F F'), (conv X X').
dconv (forall_lam B F) (forall_lam B' F') 
    :- (conv B B')
    ,  (pi x\ locDecl x B =>
                (conv (F x) (F' x))
       )
    .




trad (forall B C) (forall B' C') :-
        spy (trad B B'),
        spy (pi x\ pi x' \ trad x x' => locDecl x B => locDecl x' B' => trad (C x )(C'  x')).

