bracket Pre G Post :- print Pre, term_to_string G S, print S, print Post.
announce G :- bracket ">>" G "\n", fail.
spy G :- (bracket "[Entering " G "\n", G, bracket "]Success  " G "\n";
          bracket "]Leaving  " G "\n",  fail).

load_library [] GOAL :- GOAL.
load_library [ddd NAME BODY | TAIL ] GOAL :-
 of int BODY TYPE,
 defs NAME BODY TYPE => load_library TAIL GOAL.


hnf A B :- announce (hnf A B).
hstep A B :- announce (hstep A B).
dstep A B :- announce (dstep A B).
nf A B :- announce (nf A B).
conv A B :- announce (conv A B).
of IE A B :- announce (of IE A B).


isType set A :- announce (isType set A).
isa IE BB B :- announce (isa IE BB B).
conv A B :- announce (conv A B).

