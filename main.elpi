%-- non contextual, non reflexive, maybe transitive closure
%-- hstep A B
%---- non contextual, transitive, reflexive normal form
%-- hnf A B
%---- contextual, non reflexive, maybe transitive closure
%-- dstep A B

type hstep, dstep, hnf, nf, conv A -> A -> prop.

hstep X N :- locDef X T M , conv M N.
hnf A B :- hstep A C, !, hnf C B.
hnf A A.
dstep A B :- hstep A B.
nf A B :- dstep A C, !, nf C B.
nf A A.
conv A A :- ! .
conv A B :- nf A C, nf B C.

kind mttTerm, mttType, mttKind, mttLevel type.
type ext, int              mttLevel. 
type col, set, prop, props mttKind.
type isType  mttType -> mttKind -> mttLevel -> prop.

isType A col IE  :- isType A set   IE.
isType A col IE  :- isType A prop  IE.
isType A set IE  :- isType A props IE.
isType A prop IE :- isType A props IE.

isType A KIND IE :- locDecl _ A KIND IE.

type of, isa mttTerm -> mttType -> mttLevel -> prop.

isa Term TY IE :-
    of Term TY' IE,
    conv TY TY'.


of X Y IE :- locDecl X Y .

type locDef  mttTerm -> mttType -> mttTerm -> prop.
type locDecl  mttTerm -> mttType -> prop.


type forall mttType -> (mttTerm -> mttType) -> mttType.

isType (forall B C) prop ext :-
        println "--forall------"
    ,   (pi x\ locDecl x B => isType (C x) prop ext)
    .

isType (implies B C) prop ext :-
        println "--implies-----\n\n\n\n\n\n\n"
    ,   isType B prop ext
    ,   isType C prop ext
    .

isType (propEq TypeC C1 C2) prop ext:-
        println "--propEq------"
    ,   isType TypeC col ext
    ,   print "-.-.-.-." , println TypeC
    ,   spy (of C1 TypeC ext)
    ,   println "--first-spy-done"
    ,   spy (of C2 TypeC ext)
    .



%tau Tipo_di_partenza Tipo_di_arrivo Input Output :- fail.

tau' TipoExt ElementoExt Output :-
    trad ElementoExt ElementoInt,
    trad TipoExt TipoInt,
    of ElementoInt Ty int,
    tau Ty TipoInt ElementoInt Output.


%isType A Sort IE
%of X A IE
%locDef X A M IE








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Is this ever needed?
%trad (of Aa AA ext)
%     (of(tau A_inferred (TradAA) (TradAa) )
%        (TradAA)
%        int
%     ) :-
%     (trad AA TradAA),
%     (trad Aa TradAa),
%     of (TradAa) A_inferred int.


% [NOTAZIONI]
%   X Xx indicano tipo ed elemento
%   of elemento tipo IE
%   isType tipo Kind IE
%

