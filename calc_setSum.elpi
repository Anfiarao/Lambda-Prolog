%%-- calc_setSum.elpi

%%Disjoint Sum Type

isType (setSum A B) set IE :- isType A set IE, isType B set IE.

of (inr A B Bb) (setSum A B) IE 
    :- isType B set IE
     , isType A set IE
     , isa Bb B int IE
     .

of (inl A B AA) (setSum A B) int 
    :- isType A set IE
     , isType B set IE
     , isa Aa A int IE
     .

of (elim_setSum C W Cl Cr) (C W) IE 
    :- of W (setSum A B) IE 
     , (pi z\ of z (setSum A B) IE => isType (C z) set IE)
     , (pi x\ of x A IE => of (Cl x) (C (inr A B x)) IE) 
     , (pi y\ of y B IE => of (Cr y) (C (inl A B y)) IE) 
     .

hstep (elim_setSum C W Cl Cr) (Cl Wl) :- hnf W (inl A B Wl).
hstep (elim_setSum C W Cl Cr) (Cr Wr) :- hnf W (inr A B Wr).

dstep (elim_setSum C W Cl Cr) (elim_setSum C W' Cl Cr) :- dstep W W'.

dstep (elim_setSum C W Cl Cr) (elim_setSum C W Cl' Cr) :- 
    pi w\ of w (setSum A B) int => dstep (Cl w) (Cl' w).

dstep (elim_setSum C W Cl Cr) (elim_setSum C W Cl Cr') :- 
    pi w\ of w (setSum A B) int => dstep (Cr w) (Cr' w).  

dstep (elim_setSum C W Cl Cr) (elim_setSum C' W Cl Cr) :- 
    pi w\ of w (setSum A B) int => dstep (C w) (C' w).  


dstep (inl A B AA) (inl A B AA') :- dstep AA AA'.
dstep (inr A B BB) (inr A B BB') :- dstep BB BB'.

