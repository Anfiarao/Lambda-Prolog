
% trad è uno-a-molto nei tipi
% il tipo intensionale può variare per lo stesso elemento estensionale



trad (forall B C) (forall B' C') :-
        spy (trad B B'),
        spy (pi x\ pi x' \ trad x x' => locDecl x B => locDecl x' B' => trad (C x )(C'  x')).

trad singleton singleton.
trad star star.

trad (implies B C) (forall B' C') 
    :- trad B B'
    ,  spy(pi x\ pi x'\ 
        (  trad x x'
        ,  locDecl x B
        ,  locDecl x' B') 
            =>  trad C (C' x')
    )
    .


trad (propEq A Aa1 Aa2) R 
    :- spy(equ A EquA)
    ,  spy(trad_isa Aa1 A Aa1')
    ,  spy(trad_isa Aa2 A Aa2')
    ,  spy(R = (EquA Aa1' Aa2'))
    .

trad (eqId  A Aa)  T
    :- spy(reflu A ReflA)
    ,  spy(trad Aa Aa')
    ,  T = (ReflA Aa') 
    .
reflu (propEq _ _ _) (_\id singleton star).

equ singleton (x\ y\ propId singleton x y).
reflu singleton (x\ id singleton x).

equ (propEq A Aa1 Aa2) (_\ _\ (propId singleton star star)).

pippo (propEq T_ T1 T2) (propEq T T1' T2') (F)
    :- spy(pippoequ T1 T1' T F1)
    ,  spy(pippoequ T2 T2' T F2)
    ,  spy(trad_isa T1 T T1i)
    ,  spy(trad_isa T2 T T2i)
    ,  spy(trad_isa T1' T T1i')
    ,  spy(trad_isa T2' T T2i')
    ,  spy(trad T Ti)
    ,  F = x\ impl_app ( 
                impl_app ( 
                 forall_app ( 
                  forall_app ( 
                   impl_app ( 
                    forall_app ( 
                     forall_app (k_propId T) T1i) T1i') F1) T2i) T2i') F2) x
    .
pippo_trasp (propEq _ _ _ ) (propEq _ _ _) (h\h'\k\ k).



locDecl (k_propId Te) (forall T t1\ forall T t1'\ 
        implies (E t1 t1') (forall T t2\ forall T t2'\ 
                implies (E t2 t2') (implies (E t1 t2) (E t1' t2'))) )
                :- trad Te T
                ,  equ Te E
                .


% supponiamo che conv X Y per poter usare pippoequ X Y H
%       H è la prova che i tradotti siano uguali nel loro setoide

pippoequ  _ _ (propEq T A B) (id singleton star).

symmu T (x\ fixMe "prova di symmetria").




