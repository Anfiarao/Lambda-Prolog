len [] 0 :- !.
len [_ | L] N :- len L M, N is M + 1.
len_str L NS :- len L N, term_to_string N NS.

member X [Y | L] :- X = Y ; member X L .
count' Old Tot :- indent X, not (member X Old), !, count' [X | Old] Tot.
count' Old Old.
to_zero [] [].
to_zero [X | L] [0|L'] :- to_zero L L'.
c_indent TT :- count'  [] T, to_zero T TT.

print_indent :- c_indent T,  print_dash T.

print_dash [].
print_dash [X|L] :- print "-", print_dash L.
str_dash C [] "".
%str_dash C [_ | E] "" :- E = [], !.
str_dash C [_ | L] S :- str_dash C L SS, S is (C ^ SS), !.

indent_str C S N :- c_indent T, str_dash C T S, len_str T N.
print_indent C S N :- indent_str C S N.

bracket IC Pre G Post :- print_indent IC I N, term_to_string G S, 
    Q is (I ^ N ^ Pre ^ S ^ Post), print Q.

announce G :- bracket " " ">>" G "\n", fail.
%spy G :- c_indent T, indent [0 | T] => G , !.
spy G :- c_indent T, indent [0 | T] => spy2 G.

spy2 G :-  (bracket "_" "[+[Begin \n" G "\n", G, bracket "_" "]-]Success  \n" G "\n") , !. 
spy2 G :-  bracket "." "].]Fail  \n" G "\n",  fail.







/*
trad A B      :- announce (trad A B).
tau A B C D   :- announce (tau A B C D).
tau' A B C    :- announce (tau' A B C).

hnf A B       :- announce (hnf A B).
hstep A B     :- announce (hstep A B).
dstep A B     :- announce (dstep A B).
nf A B        :- announce (nf A B).
conv A B      :- announce (conv A B).
of A B IE     :- announce (of A B IE). 

isType A K IE :- announce (isType A K IE).
isa BB B IE   :- announce (isa BB B IE) .
sigm A B D    :- announce (sigm A B D).
equ T A B O   :- announce (equ T A B O) .
%macro A B    :- announce (macro A B). 


of A B IE :- announce (of A B IE). 
locDef A B C :- announce(locDef A B C).
locDecl A B :- announce(locDecl A B).
locDeclType A B :- announce(locDeclType A B).

nf A B :- announce (nf A B).
hstep A B :- announce (hstep A B).
conv A B :- announce ( conv A B).
testB A :- announce (testB A).
hstep A B :- announce (hstep A B). 
*/