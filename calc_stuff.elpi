%%POWER COLLECTION 

trad powerCol propsCol.

bnf (equ propsCol Z1 Z2) (and (implies Z1 Z2) (implies Z2 Z1))
    :- of Z1 propsCol,
       of Z2 propsCol.

bnf (subst X1 X2 W) W :- 
    of W propsCol, 
    (sigma T\ of X1 T, of X2 T).
    
trad (propsEquClass A) TA :- trad A TA.

tau_rec powerCol powerCol (x \ x).

%% EMPTYSET

trad emptyset emptyset.

equ emptyset (lambda emptyset x \ lambda emptyset y \ id emptyset x y).

trad (emp A T) (emp A' T') :-
 trad T T1, tau T T1 T',
 pi x \ trad x x => of IE x emptyset => of ext x emptyset => bnf x x =>
  trad (A x) (A1 x), tau (A x) (A1 x) (A' x). 

tau_rec emptyset emptyset (x \ x).

prove_equ (emp A T) (emp A' T') (emp (EQU T T') T) :-
 of IE T TTY, equ TTY EQU.


