include calc.


bnf (nrec T F K zero) K.
bnf (nrec T F K (succ N)) (F N (nrec F K N)).

bnf (nrec T F K A1) (nrec T F K A2) :- bnf A1 A2.
bnf (nrec T F K1 A) (nrec T F K2 A) :- bnf K1 K2.
bnf (nrec T F1 K A) (nrec T F2 K A) :-
 pi x \ bnf x x => of x nat =>
 pi y \ bnf y y => of y (T x) =>
 bnf (F1 x y) (F2 x y).

bnf (succ E) (succ Q) :- bnf E Q.
bnf zero zero.

isType nat.
of zero nat.
of (succ A) nat :- of A nat.
of (nrec T F K A) (T A) :-
 of A nat,
 of K (T zero),
 (pi x \ bnf x x => of x nat => isType (T x)),
 (pi x \ bnf x x => of x nat =>
  pi y \ bnf y y => of y (T x) =>
  of (F x y) (T (succ x))).

macro plus ( nrec x\y\succ y ).   %%%MACROOOOOOOOOOOOOOOO!!!!!!!!!!!!!1
macro prec ( nrec (x\y\x) zero). 




intnat 0 zero.
intnat K (succ N) :- 
    K > 0, KK is K - 1, 
    intnat KK N.

natint zero 0 :- 1 = 1, !.
natint Nat Int :-
    macro prec Prec,
    printt (Prec Nat),
    nf (Prec Nat) A,
    natint A Int2,
    Int is Int2 + 1
    .


natPlus A B C :- 
    (intnat A AA), 
    (intnat B BB), 
    (macro plus Plus),
    (nf (Plus AA BB) K),
    (natint K C).



%is_canon zero.  is_canon succ.  is_const nrec.
