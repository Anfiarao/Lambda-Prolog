bracket Pre G Post :- print Pre, term_to_string G S, print S, print Post.
announce G :- bracket ">>" G "\n", fail.
spy G :- (bracket ">Entering " G "\n", G, bracket ">Success  " G "\n";
          bracket ">Leaving  " G "\n",  fail).

conv A B :- nf A B ; (nf A C, nf B C).
nf A B :- announce ( nf A B).
nf A A :- bnf A A, ! .
nf A B :- bnf A C , nf C B .

bnf A B :- announce (bnf A B).
bnf (nrec F K zero) K         :-  print "\n$bnf nrec 0$".
bnf (nrec F K (succ N)) (F N (nrec F K N)) :-  print "\n$bnf nrec succ$" .
bnf (succ E) (succ Q) :- bnf E Q.
bnf zero zero.

isType nat.
is_canon zero.  is_canon succ.  is_const nrec.
of zero nat.
of (succ A) nat :- of A nat.

defs plus (m\ nrec succ m).
defs prec ( nrec (x\y\x) zero). 


intnat 0 zero.
intnat K (succ N) :- 
    K > 0, KK is K - 1, 
    intnat KK N.

natint A B :- announce ( natint A B).

natint zero 0 :- !.
natint Nat Int :-
    defs prec Prec,
    nf (Prec Nat) A,
    print "\n11\n11\n",
    natint A Int2,
    Int is Int2 +1
    .

