accumulate debug.



accumulate main.

accumulate calc/and.
accumulate calc/colSigma.
accumulate calc/Eq.
accumulate calc/exist.
accumulate calc/forall.
accumulate calc/id.
accumulate calc/implies.
accumulate calc/letIn.
accumulate calc/or.
accumulate calc/setPi.
accumulate calc/setSum.
accumulate calc/singleton.
accumulate calc/trad.


testZ A B C
  :- Long = (
    forall singleton x\(implies 
            (propEq singleton x star) 
            (implies 
              (propEq singleton star x) 
      forall 
        (setPi (propEq singleton star x) y\
          (fun 
            (propEq (propEq singleton star star) y (eqId singleton star)) 
            singleton)) f\ 
          
              (propEq 
                singleton 
                (fun_app 
                  (app f (eqId singleton star) ) 
                  (eqId 
                    (propEq 
                      (propEq singleton star star) 
                      (eqId star) 
                      (eqId star)) 
                    (eqId singleton star))) 
                star)
        ))
    )
    , isType Long A ext
    .



testG A Q Qy
 :- Long = (
        forall singleton x\
        forall (fun singleton singleton) g\
        forall (fun (propEq singleton (fun_app g x) (fun_app g star)) singleton) f\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (fun_app f (eqId singleton (fun_app g star))) 
                    (fun_app f (eqId singleton (fun_app g star))) 
            )
        )
        ),
    %spy(isType Long A ext),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(trad Long Q),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n"
  ,  spy(isType Q Qy int)
    .


testSUM A Q Qy
 :- Long = (
    forall (setSum singleton singleton) x\
     forall (fun (propEq (setSum singleton singleton) x (inl singleton singleton star)) 
                 (setSum singleton singleton)) f\
            (implies (propEq (setSum singleton singleton)
                             (inl singleton singleton star) 
                             x)
                     (propEq (setSum singleton singleton) 
                             (fun_app f 
                                      (eqId (setSum singleton singleton) 
                                            (inl singleton singleton star))) 
                             (fun_app f 
                                      (eqId (setSum singleton singleton) 
                                            (inl singleton singleton star)))
            )
        )
        ),
    spy(isType Long A ext),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(trad Long Q),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(isType Q Qy int)
    .











testB  :- pi X\ pi Y\ (locDecl _ (propEq singleton X Y) => spy(conv X Y)). 




testC
 :- spy( 
        isaT (
        forall singleton x\
        forall (fun (propEq singleton x star) singleton) f\
        (implies (propEq singleton star x)
            (
             (propEq singleton 
                    (fun_app f (eqId singleton star)) 
                    (fun_app f (eqId singleton star)) 
            )
            )
        )
        ) col ext).


testE
 :- spy( 
        isaT (
        forall singleton x\
        forall (fun (propEq singleton x star) singleton) f\
        ( implies (propEq singleton x star)
            ( letIn (propEq  singleton star x) (eqId singleton x) _\
             (propEq singleton 
                    (fun_app f (eqId singleton star)) 
                    (fun_app f (eqId singleton star)) 
            )
            )
        )
        ) col ext).


testD 
 :- spy( 
        isaT (
        forall singleton x\
        forall (fun (propEq singleton x star) singleton) f\
        forall (propEq singleton star star) l\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (fun_app f l) 
                    (fun_app f l) 
            )
        )
        )col ext).

testF A Q Qy
 :- Long = (
        forall singleton x\
        forall (fun (propEq singleton x star) singleton) f\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (fun_app f (eqId singleton star)) 
                    (fun_app f (eqId singleton star)) 
            )
        )
        ),
    spy(isType Long A ext),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(trad Long Q),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(isType Q Qy int)
    .



testS A B C
    :- Long = (
        forall (setSum singleton singleton) x\
        forall (fun (propEq (setSum singleton singleton) x (inl singleton singleton star)) (setSum singleton singleton)) f\
        ( implies (propEq (setSum singleton singleton) (inl singleton singleton star) x)
            (propEq (setSum singleton singleton) 
                    (fun_app f (eqId (setSum singleton singleton) (inl singleton singleton star))) 
                    (fun_app f (eqId (setSum singleton singleton) (inl singleton singleton star))) 
            )
        )
        )
    ,  spy(isType Long A ext)
    ,  spy(trad Long B)
    .





































testA Q1 Q2 :- 
 (pi x\ 
   pi y\ 
    pi l\ 
     pi f\ pi h\ 
      locDecl x singleton =>
       locDecl y singleton =>
        locDecl l (propEq singleton x x) =>
         locDecl f (fun (propEq singleton y y) singleton) =>
          locDecl h (propEq singleton x y) =>
           ( 
            %hnf (fun_app f l) (Q f l)
         %spy   (of  (fun_app f l) (Q1 x y l h f) ext)
    %spy     (dstep  x (Q1 x y l h f))
    spy     (conv  (propEq singleton x x) (propEq singleton y y) )
    %spy     (nf (propEq singleton x x) (Q1 x y l h f))
            %isa f (fun (Q1 x y l h f)(Q2 x y l h f) )ext
            %isa l (Q1 x y l h f) ext
           
           )
           ).
















































