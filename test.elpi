accumulate debug.

 
accumulate trad.
 
accumulate main.

accumulate calc/and.
accumulate calc/colSigma.
accumulate calc/Eq.
accumulate calc/exist.
accumulate calc/forall. 
%accumulate calc/fun.
accumulate calc/id.
accumulate calc/implies.
accumulate calc/letIn.
accumulate calc/or.
accumulate calc/setPi.
accumulate calc/setSum.
accumulate calc/singleton.

testH A Q Qy
 :- Long = (
        forall (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        ),
    %spy(isType Long A ext),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(trad Long Q),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n"
  ,  spy(isType Q Qy int)
    .



testF A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi (propEq singleton x star) _\singleton) f\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eqId singleton star)) 
                    (app f (eqId singleton star)) 
            )
        )
        ),
    spy(isType Long A ext),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(trad Long Q),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(isType Q Qy int)
    .

testZ A B C
  :- Long = 
(forall 
  singleton x\
  (implies (propEq singleton x star) (implies (propEq singleton star x) 
      (forall 
        (setPi 
          (propEq 
            singleton star x) y\
          (setPi 
            (propEq (propEq singleton star star) y (eqId singleton star)) _\
            singleton)) f\   
        (propEq singleton 
        (app 
            (app f (eqId singleton star))
            (eqId (propEq singleton star star) 
            (eqId singleton star)
            )) 
        star)
            )  ))
    )
    , spy(isType Long A ext)
    , spy(trad Long B)
    , spy(isType B C int)
    .



testG A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi singleton _\singleton) g\
        forall (setPi (propEq singleton (app g x) (app g star)) _\singleton) f\
        (implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eqId singleton (app g star))) 
                    (app f (eqId singleton (app g star))) 
            )
        )
        ),
    %spy(isType Long A ext),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(trad Long Q),
    print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n"
  ,  spy(isType Q Qy int)
    .



testMAD A B C
  :- Long = 
(forall 
  (propEq singleton star star) x\
  (implies (propEq (propEq singleton star star) x (eqId singleton star)) (implies (propEq (propEq singleton star star) (eqId singleton star) x) 
      (forall 
        (setPi 
          (propEq 
            (propEq singleton star star) (eqId singleton star) x) y\
          (setPi 
            (propEq (propEq (propEq singleton star star) (eqId singleton star) (eqId singleton star)) y (eqId (propEq singleton star star) (eqId singleton star))) _\
            (propEq singleton star star))) f\   
        (propEq (propEq singleton star star) 
        (app 
            (app f (eqId (propEq singleton star star) (eqId singleton star)))
            (eqId (propEq (propEq singleton star star) (eqId singleton star) (eqId singleton star)) 
            (eqId (propEq singleton star star) (eqId singleton star))
            )) 
        (eqId singleton star))
            )  ))
    )
    , spy(isType Long A ext)
    , spy(trad Long B)
    , spy(isType B C int)
    .

