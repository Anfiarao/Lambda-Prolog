accumulate main.


test Q1 Q2 Q3 :-
        print "TEST 1\n",
        spy (trad (elim_singleton star (x\singleton) star) Q1
            ),
        makeline "-",
        
        print "TEST 2\n",
        spy (nf (elim_singleton star (x\singleton) star) Q2 
            ),
        makeline "-",

        print "TEST 3\n",
        spy (of (pair singleton (x\singleton) star star ) Q3 int
            ),
        makeline "-",

        C = 1.


e1 Q :- nf (elim_setSum (inl star) (x\inl (inl x)) (y\inr(inr y)) ) Q .


e2 Q :- nf (elim_setSum (inr star) (x\inl (inl x)) (y\inr(inr y)) ) Q .

test 1 Q :- of (inl nat singleton zero) Q int. 
test 2 Q :- of (inr nat singleton zero) Q int. %should fail

test 3 Q :- 
    of  (elim_setSum 
        (x\setSum singleton nat) 
        (inl nat singleton zero) 
        (X\inr singleton nat X) 
        (y\inl singleton nat y))
        Q
        int.

test 4 Q :- 
    nf (elim_setSum 
        (x\setSum singleton nat) 
        (inl nat singleton zero) 
        (X\inr singleton nat X) 
        (y\inl singleton nat y)) Q.

test 5 Q :- 
    hnf (elim_setSum 
        (x\setSum singleton nat) 
        (inl nat singleton zero) 
        (X\inr singleton nat X) 
        (y\inl singleton nat y)) Q.


