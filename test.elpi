accumulate debug.




accumulate calc/Eq.

accumulate calc/setPi.

accumulate calc/singleton.

accumulate main.

testC
    :-  Long = (
        forall singleton x\
         forall singleton y\
          forall (propEq singleton x star) l\
           forall (setPi (propEq singleton y star) z\ singleton) f\
            forall (propEq singleton x y) h\
                (propEq singleton (apply f l) star)
            )
    ,   println Long
    ,   isType Long prop ext
    .


testExt
    :-  Dom = singleton
    ,   println Dom
    ,   Long = (
        forall Dom x\
         forall Dom y\
          forall (propEq Dom x x) l\
           forall (setPi (propEq Dom y y) z\ Dom) f\
            implies (propEq Dom x y) (propEq Dom (apply f l) (apply f l))
            )
    ,   println Long
    ,   isType Long prop ext
    .


testshort Q :-
        Dom = singleton
    ,   Short = (
         forall Dom y\
          forall singleton l\
           forall (setPi singleton z\Dom) f\
            (propEq Dom (apply f l) (apply f l))
            )
    ,   isType Short Q ext
    .

test sostituzione_diretta :- locDecl h (propEq singleton qwe star) => dstep qwe A.
test sostituzione_indiretta :- (dstep a b :- locDef _ (propEq _ a b) _ ) .

spy_depth N :- sigma L\ spy_indent L , pi L'\ spy_indent L' => sublist L' L.
spy_add [0|LL] :- sigma L\ spy_indent L , pi L'\ spy_indent L' => sublist L' L.


